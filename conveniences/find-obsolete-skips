#!/usr/bin/perl
#
# find-obsolete-skips -- find 'skip's that reference closed issues
#
# $Id: find-obsolete-skips,v 1.6 2022/07/25 14:25:59 esm Exp esm $
#
package ESM::FindObsoleteSkips;

use v5.14;
use utf8;
use open qw( :encoding(UTF-8) :std );

use strict;
use warnings;

(our $ME = $0) =~ s|.*/||;
(our $VERSION = '$Revision: 1.6 $ ') =~ tr/[0-9].//cd;

# For debugging, show data structures using DumpTree($var)
#use Data::TreeDumper; $Data::TreeDumper::Displayaddress = 0;

###############################################################################
# BEGIN user-customizable section

# END   user-customizable section
###############################################################################

use File::Find;

###############################################################################
# BEGIN boilerplate args checking, usage messages

sub usage {
    print  <<"END_USAGE";
Usage: $ME [OPTIONS]

Use --debug to show all matches, even those not closed

OPTIONS:

  -v, --verbose  show verbose progress indicators
  -n, --dry-run  make no actual changes

  --help         display this message
  --man          display program man page
  --version      display program name and version
END_USAGE

    exit;
}

sub man {
    # Read the POD contents.  If it hasn't been filled in yet, abort.
    my $pod = do { local $/; <DATA>; };
    if ($pod =~ /=head1 \s+ NAME \s+ FIXME/xm) {
        warn "$ME: No man page available.  Please try $ME --help\n";
        exit;
    }

    # Use Pod::Man to convert our __DATA__ section to *roff
    eval { require Pod::Man }
        or die "$ME: Cannot generate man page; Pod::Man unavailable: $@\n";
    my $parser = Pod::Man->new(name => $ME, release => $VERSION, section => 1);

    # If called without output redirection, man-ify.
    my $out_fh;
    if (-t *STDOUT) {
        my $pager = $ENV{MANPAGER} || $ENV{PAGER} || 'less';
        open $out_fh, "| nroff -man | $pager";
    }
    else {
        open $out_fh, '>&STDOUT';
    }

    # Read the POD contents, and have Pod::Man read from fake filehandle.
    # This requires 5.8.0.
    open my $pod_handle, '<', \$pod;
    $parser->parse_from_filehandle($pod_handle, $out_fh);
    exit;
}


# Command-line options.  Note that this operates directly on @ARGV !
our $debug   = 0;
our $force   = 0;
our $verbose = 0;
our $NOT     = '';              # print "blahing the blah$NOT\n" if $debug
sub handle_opts {
    use Getopt::Long;
    GetOptions(
        'debug!'     => \$debug,
        'dry-run|n!' => sub { $NOT = ' [NOT]' },
        'force'      => \$force,
        'verbose|v'  => \$verbose,

        help         => \&usage,
        man          => \&man,
        version      => sub { print "$ME version $VERSION\n"; exit 0 },
    ) or die "Try `$ME --help' for help\n";
}

# END   boilerplate args checking, usage messages
###############################################################################

############################## CODE BEGINS HERE ###############################

# The term is "modulino".
__PACKAGE__->main()                                     unless caller();

# Main code.
sub main {
    # Note that we operate directly on @ARGV, not on function parameters.
    # This is deliberate: it's because Getopt::Long only operates on @ARGV
    # and there's no clean way to make it use @_.
    handle_opts();                      # will set package globals

    # Fetch command-line arguments.  Barf if too many.
    die "$ME: Too many arguments; try $ME --help\n"                 if @ARGV;

    # FIXME: do code here
    find { wanted => \&find_obsolete_skips, no_chdir => 1 }, '.';
}


sub find_obsolete_skips {
    my $path = $File::Find::name;

    return if $path =~ m!/vendor/!;         # skip vendor files
    return if $path =~ m!/_output/!;        # skip vendor files
    return if $path =~ m!/\.!;              # skip dotfiles
    return if $path =~ m!~$!;               # skip emacs backups

    return if $path !~ /\.(bats|go)$/ && $path !~ /apply-podman-deltas/;
#    print $path,"\n";

    open my $fh, '<', $path
        or die "$ME: Cannot read $path: $!\n";
    while (my $line = <$fh>) {
        chomp $line;
        $line =~ s/^\s+//;

        # Skip with an issue: Magenta
        if ($line =~ s/(\b[Ss]kip[^a-z].*)(\#(\d{4,5}))(\D)/${1}\e[35m${2}\e[m${4}/) {
            my $issue = $3;
            my $lineno = $.;

            if (is_closed($issue)) {
                print "$path:$lineno: $line\n";
            }
            elsif ($debug) {
                # "still open" in blue
                $line =~ s/\[\d+m/\[34m/g;
                print "$path:$lineno: $line \e[34m(still open)\e[m\n";
            }
        }

        # Skip + FIXME, without issue number, in orange
        elsif ($line =~ s/\b([Ss]kip[^a-z].*?)(FIXME)/${1}\e[33m${2}\e[m/) {
            print "$path:$.: $line\n";
        }

        # FIXME, with issue number but without skip, in red
        elsif ($line =~ s!(//\s+)(.*?)(FIXME)(.*)\#(\d{4,5})!${1}${2}\e[31;1m${3}\e[35m${4}#${5}\e[m!) {
            my $issue = $5;
            my $lineno = $.;
            if (is_closed($issue)) {
                print "$path:$lineno: $line\n";
            }
            elsif ($debug) {
                # "still open" in blue
                $line =~ s/\[\d+m/\[34m/g;
                print "$path:$lineno: $line \e[34m(still open)\e[m\n";
            }
        }
    }
    close $fh;
}


sub is_closed {
    my $issue = shift;
    state %is_closed;

    $is_closed{$issue} //= do {
        my $state;
        open my $gh, '-|', 'gh', 'issue', 'view', $issue
            or die "$ME: Cannot fork: $!\n";
        while (my $line = <$gh>) {
            $state //= $1 if $line =~ /^state:\s+(\S+)/;
        }
        close $gh;

        print "$issue -> $state\n" if $debug;
        ($state||'') eq 'CLOSED';
    };
}

1;

__DATA__

###############################################################################
#
# Documentation
#

=head1	NAME

FIXME - description of what this script does

=head1	SYNOPSIS

FIXME [B<--foo>]  [B<--bar>]  [B<--verbose>] ARG1 [ARG2...] FIXME

FIXME  B<--help>  |  B<--version> | B<--man>

=head1	DESCRIPTION

B<FIXME> grobbles the frobniz on alternate Tuesdays, except where
prohibited by law.

=head1	OPTIONS

=over 4

=item B<--foo>

FIXME

=item B<--verbose>

Show progress messages.

=item B<--help>

Emit usage hints.

=item B<--version>

Display program version.

=item B<--man>

Display this man page.

=back


=head1	DIAGNOSTICS

FIXME

=head1	ENVIRONMENT

FIXME

=head1	FILES

FIXME

=head1	RESTRICTIONS

FIXME

=head1	SEE ALSO

FIXME

e.g. L<Foo::Bar|Foo::Bar>

=head1	AUTHOR

Your Name <ed@edsantiago.com>

Please report bugs or suggestions to <ed@edsantiago.com>

=cut
